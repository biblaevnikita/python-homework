From 67629f8bd6c959d0d8cfa5c0125d2efb509ca5b2 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=D0=9D=D0=B8=D0=BA=D0=B8=D1=82=D0=B0=20=D0=91=D0=B8=D0=B1?=
 =?UTF-8?q?=D0=BB=D0=B0=D0=B5=D0=B2?= <biblaev@playrix.com>
Date: Sat, 2 Dec 2017 23:33:09 +0300
Subject: [PATCH] LOAD_OTUS

---
 Include/opcode.h        |  2 ++
 Lib/opcode.py           |  1 +
 Python/ceval.c          | 20 ++++++++++++++++++++
 Python/opcode_targets.h |  2 +-
 Python/peephole.c       | 10 ++++++++++
 5 files changed, 34 insertions(+), 1 deletion(-)

diff --git a/Include/opcode.h b/Include/opcode.h
index 9ed5487..2f877aa 100644
--- a/Include/opcode.h
+++ b/Include/opcode.h
@@ -159,6 +159,8 @@ extern "C" {
 #define SET_ADD         146
 #define MAP_ADD         147
 
+#define LOAD_OTUS 148
+
 
 enum cmp_op {PyCmp_LT=Py_LT, PyCmp_LE=Py_LE, PyCmp_EQ=Py_EQ, PyCmp_NE=Py_NE, PyCmp_GT=Py_GT, PyCmp_GE=Py_GE,
 	     PyCmp_IN, PyCmp_NOT_IN, PyCmp_IS, PyCmp_IS_NOT, PyCmp_EXC_MATCH, PyCmp_BAD};
diff --git a/Lib/opcode.py b/Lib/opcode.py
index e403365..d2a1229 100644
--- a/Lib/opcode.py
+++ b/Lib/opcode.py
@@ -188,5 +188,6 @@ def_op('EXTENDED_ARG', 145)
 EXTENDED_ARG = 145
 def_op('SET_ADD', 146)
 def_op('MAP_ADD', 147)
+def_op('LOAD_OTUS', 148)
 
 del def_op, name_op, jrel_op, jabs_op
diff --git a/Python/ceval.c b/Python/ceval.c
index 4e4adc2..caf5651 100644
--- a/Python/ceval.c
+++ b/Python/ceval.c
@@ -1231,6 +1231,26 @@ PyEval_EvalFrameEx(PyFrameObject *f, int throwflag)
             PUSH(x);
             FAST_DISPATCH();
         }
+        TARGET(LOAD_OTUS)
+        {
+            x = GETLOCAL(0);
+
+			if (x == NULL) {
+                format_exc_check_arg(PyExc_UnboundLocalError,
+                UNBOUNDLOCAL_ERROR_MSG,
+                PyTuple_GetItem(co->co_varnames, 0));
+                break;
+			}
+			Py_INCREF(x);
+			PUSH(x);
+
+            x = GETITEM(consts, oparg);
+            Py_INCREF(x);
+            PUSH(x);
+            FAST_DISPATCH();
+
+            break;
+        }
 
         PREDICTED_WITH_ARG(STORE_FAST);
         TARGET(STORE_FAST)
diff --git a/Python/opcode_targets.h b/Python/opcode_targets.h
index 95eb127..8c29b98 100644
--- a/Python/opcode_targets.h
+++ b/Python/opcode_targets.h
@@ -147,7 +147,7 @@ static void *opcode_targets[256] = {
     &&TARGET_EXTENDED_ARG,
     &&TARGET_SET_ADD,
     &&TARGET_MAP_ADD,
-    &&_unknown_opcode,
+    &&TARGET_LOAD_OTUS,
     &&_unknown_opcode,
     &&_unknown_opcode,
     &&_unknown_opcode,
diff --git a/Python/peephole.c b/Python/peephole.c
index 11f6f88..f7c75c3 100644
--- a/Python/peephole.c
+++ b/Python/peephole.c
@@ -425,6 +425,16 @@ PyCode_Optimize(PyObject *code, PyObject* consts, PyObject *names,
                 cumlc = 0;
                 break;
 
+            case LOAD_FAST:
+                if (GETARG(codestr, i) != 0 || codestr[i+3] != LOAD_CONST)
+                    continue;
+                
+                j = GETARG(codestr, i + 3);
+                codestr[i] = LOAD_OTUS;
+                SETARG(codestr, i, j);
+                memset(codestr + i + 3, NOP, 3);
+                break;
+
                 /* Try to fold tuples of constants (includes a case for lists
                    which are only used for "in" and "not in" tests).
                    Skip over BUILD_SEQN 1 UNPACK_SEQN 1.
-- 
2.8.1.windows.1

